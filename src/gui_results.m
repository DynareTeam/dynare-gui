function fHandle= gui_results(comm_name, comm_results)
    
import javax.swing.tree.*;
global project_info;
global dynare_gui_;
global M_;
global oo_;

bg_color = char(getappdata(0,'bg_color'));
special_color = char(getappdata(0,'special_color'));

main_figure = getappdata(0,'main_figure');
p = main_figure.Position;

fHandle = figure('Name', sprintf('Dynare GUI - %s results',comm_name), ...
    'NumberTitle', 'off', 'Units', 'characters','Color', [.941 .941 .941], ...
    'Position', [p(1)+3 p(2)+2 p(3)*0.4-6  p(4)-6], 'Visible', 'off', 'Resize', 'on'); %, 'WindowStyle','modal');
% 'Position', [p(1)+3 p(2)+2 70 34.5], 'Visible', 'off', 'Resize', 'on'); %, 'WindowStyle','modal');

warning('off', 'MATLAB:uitreenode:DeprecatedFunction');
warning('off', 'MATLAB:uitree:DeprecatedFunction');

%movegui(fHandle,'west');
set(fHandle, 'Visible', 'on');

handles = [];
top = 33;

uicontrol( ...
    'Parent', fHandle, ...
    'Style', 'text', 'BackgroundColor', bg_color,...
    'Units','normalized','Position',[0.01 0.92 0.98 0.05],...
    'FontWeight', 'bold', ...
    'String', 'Browse through results:', ...
    'HorizontalAlignment', 'left');

handles.uipanelSelect = uipanel( ...
    'Parent', fHandle, 'BackgroundColor', special_color,...
    'Units', 'normalized', 'Position', [0.01 0.09 0.98 0.82], ...
    'Title', '', ...
    'BorderType', 'none');

uipanelSelect_CreateFcn;



% --- PUSHBUTTONS -------------------------------------
handles.pussbuttonClose = uicontrol( ...
    'Parent', fHandle, ...
    'Style', 'pushbutton', ...
    'Units','normalized','Position',[0.01 0.02 .35 .05],...
    'String', 'Close this view', ...
    'Callback', @pussbuttonClose_Callback);

handles.pussbuttonCloseAll = uicontrol( ...
    'Parent', fHandle, ...
    'Style', 'pushbutton', ...
    'Units','normalized','Position',[0.4 0.02 .35 .05],...
    'String', 'Close all output figures', ...
    'Callback', @pussbuttonCloseAll_Callback);



    function pussbuttonClose_Callback(hObject,callbackdata)

        close;

        
    end


    function pussbuttonCloseAll_Callback(hObject,evendata)
        
        fh=findall(0,'type','figure');
        for i=1:length(fh)
            if(~(fh(i)==main_figure) && ~(fh(i)==fHandle))
                close(fh(i));
            end
        end
        
    end

    function uipanelSelect_CreateFcn()
        
        root_fld = [project_info.project_folder, '\', project_info.model_name,'\'];
        
        iconpath = fullfile(matlabroot, '/toolbox/matlab/icons/'); 
        [mtree, container] = uitree('v0', 'Root', [], 'Parent',fHandle); % Parent is ignored
       
        set(container, 'Parent', fHandle);  % fix the uitree Parent
        set(container, 'Units', 'normalized');
        set(container, 'Position', [0.03 0.11 0.94 0.78]);
        
        rootNode = uitreenode('v0', handle(mtree),project_info.model_name, [iconpath, 'foldericon.gif'], 0);  %
        mtree.setRoot (rootNode);
        
        
        
        childNodes(1) = createDynareFiguresSubtree();
        childNodes(2) = createDynareStructureSubtree();
        
        mtree.add(rootNode,childNodes );
        
        mtree.expand(rootNode);
        mtree.expand(childNodes(1));
        mtree.expand(childNodes(2));
        
        
        mtree.setSelectedNode( rootNode );
        set( mtree, 'NodeSelectedCallback', @mySelectFcn );
        
       
        function figures_nodes =createDynareFiguresSubtree()
            figures_nodes = uitreenode('v0', 'Figures','Figures generated by Dynare', [iconpath, 'foldericon.gif'], 0);
            num = 0;
            
            main_dir = [project_info.project_folder, '\'];
            output_dir = [project_info.project_folder, '\',project_info.model_name,'\Output'];
            
            results = comm_results;%dynare_gui_.est_results;
            
            names = fieldnames(results);
            num_groups = size(names,1);
            
            for i=1:num_groups
                group_name = names{i};
                group = getfield(results, group_name);
                numResults = size(group,1);
                for j=1:numResults
                    checkReqExp = regexp(group{j,5}, '/Output/{1}');
                    if(~isempty(checkReqExp))
                        f_dir = output_dir;
                    else
                        f_dir = main_dir;
                    end
                    
                    f_node = createDynareFigureNodes(group{j,1}, group{j,6},f_dir );
                    if(~isempty(f_node))
                        num = num+1;
                        f_nodes(num) = f_node;
                    end
                end
            end
            

            if(num>0)
              mtree.add(figures_nodes,f_nodes);
            end
            
        end
        
        function fnode = createDynareFigureNodes( name, figure_name_pattern, folder)
            fnode= [];
            
            listing = dir(folder);
            num= 0;
            for i=1:size(listing)
                if(~listing(i).isdir)
                    f_name = listing(i).name;
                    if ~isempty(strfind(f_name, '.fig'))
                        checkReqExp = regexp(f_name, figure_name_pattern);
                        found = 0;
                        if(iscell(checkReqExp))
                            ii = 1;
                            while (~found && ii <=size(checkReqExp,2))
                                 if(~isempty(checkReqExp{ii}))
                                     found = 1;
                                 end
                                 ii = ii+1;
                            end
                        elseif(~isempty(checkReqExp))
                            found = 1;
                        end
                        if(found)
                            num = num+1;
                            child_nodes(num) = uitreenode('v0', 'Figure',f_name, [iconpath, 'figureicon.gif'], 1);
                            set(child_nodes(num), 'UserData', folder);
                        end
                    end
                end
            end
            
            if(num>0)
                fnode =  uitreenode('v0', name, name, [iconpath, 'foldericon.gif'], 0);
                mtree.add(fnode,child_nodes);
            end
            
        end
        
        
        function structures_nodes =createDynareStructureSubtree()
            structures_nodes = uitreenode('v0','Structures','Structures generated by Dynare', [iconpath, 'foldericon.gif'], 0);
            num = 0;
            
            results = comm_results;%dynare_gui_.est_results;
            
            names = fieldnames(results);
            num_groups = size(names,1);
            
            for i=1:num_groups
                group_name = names{i};
                group = getfield(results, group_name);
                numResults = size(group,1);
                for j=1:numResults
                    structure_names = group{j,4};
                    
                    if(strcmp(structure_names, 'oo_.endo_simul'))
                        f_node = createCustomNodes('oo_.endo_simul', oo_.endo_simul, M_.endo_names);
                        if(~isempty(f_node))
                            num = num+1;
                            f_nodes(num) = f_node;
                        end
                    else
                    for k = 1: size(structure_names,2)
                        
                        f_node = createDynareStructureNodes(structure_names{k} );
                        if(~isempty(f_node))
                            num = num+1;
                            f_nodes(num) = f_node;
                        end
                        
                    end
                    end
                end
            end
            
            if(num>0)
              mtree.add(structures_nodes,f_nodes);
            end
        end
        
        function fnode = createCustomNodes(structure_name, structure, vars)
            fnode= [];
            if(isempty(structure))
                return;
            end
            
            num= 0;
            
            try
                
                numVars = size(vars,1);
                for j=1:numVars
                    var_name = deblank(vars(j,:));
                    num = num+1;
                    long_name = gui_tools.get_long_name(var_name,'var'); 
                    if(~strcmp(long_name,var_name ))
                       str_name =  sprintf('%s (%s)', long_name, var_name);
                    else
                        str_name = long_name; 
                    end
                    child_nodes(num) = uitreenode('v0','Structure',str_name, '', 1);
                    set(child_nodes(num), 'UserData', sprintf('%s(%d,:)''',structure_name,j));
                end
                
                mtree.add(fnode,child_nodes);
                
            catch ME
                h=1;
            end
            
            
            
            if(num>0)
                fnode =  uitreenode('v0',structure_name, structure_name, [], 0);
                mtree.add(fnode,child_nodes);
            end
            
        end
   
        function fnode = createDynareStructureNodes(structure_name)
            fnode= [];
            if(isempty(structure_name))
                return;
            end
            
            num= 0;
            
            try
                struct = evalin ('base', structure_name);
                if(isfield(struct, 'Mean'))
                    value = struct.Mean;
                    struct_path = [structure_name, '.Mean.'];
                else
                    value = struct;
                    struct_path = [structure_name, '.'];
                end
                vars = fields(value);
                numVars = size(vars,1);
                for j=1:numVars
                    
                    num = num+1;
                    long_name = gui_tools.get_long_name(vars{j},'var'); 
                    if(~strcmp(long_name,vars{j} ))
                       str_name =  sprintf('%s (%s)', long_name, vars{j});
                    else
                        str_name = long_name; 
                    end
                    child_nodes(num) = uitreenode('v0','Structure',str_name, '', 1);
                    %set(child_nodes(num), 'UserData',getfield(value, vars{j}) );
                    set(child_nodes(num), 'UserData', [struct_path, vars{j}]);
                end
                
                mtree.add(fnode,child_nodes);
                
            catch ME
                h=1;
            end
            
            
            
            if(num>0)
                fnode =  uitreenode('v0',structure_name, structure_name, [], 0);
                mtree.add(fnode,child_nodes);
            end
            
        end
   
        function mySelectFcn(tree, event)
            try
                nodes = tree.getSelectedNodes;
                node = nodes(1);
                if(get(node, 'LeafNode'))
                    name = get(node, 'Name');
%                     path = root_fld;
%                     temp = node;
%                     while(get(temp,'Parent')~= root)
%                         parent = get(temp,'Parent');
%                         path = [path,get(parent,'Name'),'\'];
%                         temp = parent;
%                     end
                    data = get(node, 'UserData');
                    value = get(node, 'Value');
                    
                    
                    if (strcmp(value, 'Figure'))
                        h1 = openfig([data,'\',name], 'invisible', 'reuse');
                        h1.Units= 'characters';
                        h1.Position = [p(1)+p(3)*0.4 p(2)+2 p(3)*0.6-6  p(4)-6];
                        h1.Visible = 'on';
                        
                    else
                       fh = figure('Units', 'characters', 'Position', [p(1)+p(3)*0.4 p(2)+2 p(3)*0.6-6  p(4)-6], 'Resize', 'on');
                       %[p(1)+78 p(2)+2 100 31]
                       x =evalin('base', data);
                       plot(x);
                       title(name);
                       %title(sprintf('%s (%s)', gui_tools.get_long_name(name,'var'),name));
                    end
                    
              end
            catch ME
                x= 'error';
            end
        end
        
      end

end
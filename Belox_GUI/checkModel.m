function checkModel(title_var, i_var, first_period, last_period, comp_type)
%      checkModel is a function used by Belox DSGE model interactive
%      simulator (Belox GUI)which plots differences between historical 
%      and model data for selected observable variable i_var.
%
% Copyright (C) 2014 Belox Advisory Services
%
% This file is part of Belox DSGE model interactive simulator written in Dynare and Matlab.

model_name = char(getappdata(0,'model_name'));
first_obs= getappdata(0,'first_observation');

% First we load Excel file saved by model data file
[num,txt,raw] = xlsread(sprintf('%s_output.xls', model_name),'Sheet1');

% Then we load Belox_GUI.mat file that has oo_ structure last generated by estimation command (either by initialization or advance settings functionalities
load(sprintf('Belox_GUI.mat', model_name));

numSelected = length(i_var);
var_position= varlist_indices(i_var,txt);

time= first_period:last_period;

rdate = char(getappdata(0,'last_quarter_mmmyyy'));
p=getappdata(0,'num_historic_periods');

dvec=createdatevec(rdate,p-first_obs+1,'backward_quarter');  


total = last_period - first_period;
[nbplt,nr,nc,lr,lc,nstar] = pltorg(numSelected);
total = total * nr;
datestep=ceil(total/10);

sg=1:datestep:size(dvec,1);


currentFig = 1;
currentSubplot = 0;
fig = figure('Name', 'Check model');
%set(fig, 'Position', [0 0 screen_size(3) screen_size(4) ] );
i=1;

for ii = 1:numSelected
    varTitle = title_var{ii};
    varName = i_var{ii};
    data = num(:,var_position(ii));
    history = data(first_period+first_obs-1:last_period+first_obs-1);
    
    currentSubplot = currentSubplot + 1;
    if(currentSubplot> nstar)
        currentFig = currentFig+1;
        if(currentFig == nbplt)
            nr= lr;
            nc=lc;
        end
        fig = figure('Name', 'Check model');
        %set(fig, 'Position', [0 0 screen_size(3) screen_size(4) ] );
        currentSubplot = 1;
    end
    subplot(nr,nc,currentSubplot);
    
    if(comp_type == 0) 
        model_data= eval(sprintf('Belox_GUI_oo.UpdatedVariables.Mean.%s',varName));
        
    else(comp_type == 1) 
%         model_data= eval(sprintf('Belox_GUI_oo.FilteredVariables.Mean.%s',varName));
        model_data= eval(sprintf('Belox_GUI_oo.Filtered_Variables_1_step_ahead.Mean.%s',varName));
    end    
  
        
    selected_period_model_data = model_data(first_period:last_period);
    index = varlist_indices(varName,Belox_GUI_model.endo_names);
    ss_value = eval(sprintf('Belox_GUI_oo.steady_state(%d)',index));
    selected_period_model_data = selected_period_model_data + ss_value;
    
    hold all % hold plot and cycle linprime_defe colors
    
     if(length(varName)>=3 && varName(3)=='L') %values in log
        history = exp(history);
        selected_period_model_data = exp(selected_period_model_data);
     end
%      plot(time,history,'Linewidth',1.5,'LineStyle', '-');
%      plot(time,selected_period_model_data,'Linewidth',1.5,'LineStyle', '--'); 
     
%      if(varName(3)=='L') %values in log
%         %plot(time,exp(history),time,exp(selected_period_model_data),'--');
%         plot(time,exp(history),'Linewidth',1.5,'LineStyle', '-');
%         plot(time,exp(selected_period_model_data),'Linewidth',1.5,'LineStyle', '--');
%     
%     else
%         %plot(time,history,time,selected_period_model_data,'--');
%         plot(time,history,'Linewidth',1.5,'LineStyle', '-');
%         plot(time,selected_period_model_data,'Linewidth',1.5,'LineStyle', '--');
%     
%     end
    
   if(comp_type ~= 2) 
       plot(time,history,'Linewidth',1.5,'LineStyle', '-');
        plot(time,selected_period_model_data,'Linewidth',1.5,'LineStyle','--');
        set(gca,'XTick',sg);
        set(gca,'XTickLabel',dvec(sg,1));
    
        %grid on % Turn on grid lines for this plot
        axis tight;
    
    
        title(varTitle);
       
       
   else
       datefinal = char(dvec(last_period));%'Jan2014';
       if(length(datefinal) == 5)
           year = datefinal(4:5);
       else
           year = datefinal(6:7);
       end
       
       if strcmp(datefinal(1:2),'Q1')==1
           date2 = strcat('Jan20',year);
       elseif strcmp(datefinal(1:2),'Q2')==1
           date2 = strcat('Apr20',year);
       elseif strcmp(datefinal(1:2),'Q3')==1
           date2 = strcat('Jul20',year);
       else
           date2 = strcat('Oct20',year);
       end
       
       FanChartRed(selected_period_model_data',[],date2,datestep,varTitle);
       plot(time,history,'Linewidth',1.5,'LineStyle', '-');
   end
   
        
        
        
   
    
    
    hold off;
    
    
    
    
end